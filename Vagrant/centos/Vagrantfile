# -*- mode: ruby -*-
# vi: set ft=ruby :

# Grab the name of the default interface
# $default_network_interface = `ip route | grep -E "^default" | awk '{printf "%s", $5; exit 0}'`

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

# INSTALL PLUGINS
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.



  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "generic/rhel8"
  # config.vm.box = "ubuntu/bionic64"
  config.vm.box = "centos/8"
  config.vm.box_version = "1905.1"

  # config.ssh.username = "vagrant"
  # config.ssh.password = "vagrant"
  # config.ssh.forward_agent = true

  #VM protheus
  config.vm.define "protheus" do |protheus|

    # HOSTNAME
    protheus.vm.hostname = "centos8-protheus"

     # Monkey patch for https://github.com/dotless-de/vagrant-vbguest/issues/367
    class Foo < VagrantVbguest::Installers::CentOS
      def has_rel_repo?
        unless instance_variable_defined?(:@has_rel_repo)
          rel = release_version
          @has_rel_repo = communicate.test("yum repolist")
        end
        @has_rel_repo
      end

      def install_kernel_devel(opts=nil, &block)
        cmd = "yum update kernel -y"
        communicate.sudo(cmd, opts, &block)

        cmd = "yum install -y kernel-devel"
        communicate.sudo(cmd, opts, &block)

        cmd = "shutdown -r now"
        communicate.sudo(cmd, opts, &block)

        begin
          sleep 5
        end until @vm.communicate.ready?
      end
    end
    protheus.vbguest.installer = Foo

    # NETWORK

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false


    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    protheus.vm.network "forwarded_port", guest: 80, host: 8080


    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via 127.0.0.1 to disable public access
    # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network "private_network", ip: "192.168.1.3"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # protheus.vm.network "public_network"
    protheus.vm.network "public_network" ,ip: "192.168.0.134"
    # protheus.vm.network "public_network" ,use_dhcp_assigned_default_route: true

    # MOUNTS

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"
    protheus.vm.synced_folder ".", "/vagrant", disabled: true
    protheus.vm.synced_folder "./security", "/home/vagrant/security"

    # PROVIDER

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    # config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    #   vb.memory = "1024"
    # end
    #
    # View the documentation for the provider you are using for more
    # information on available options.
    protheus.vm.provider "virtualbox" do |vb|
      vb.linked_clone = true
      vb.name = "centos8-protheus"
      vb.memory = 2048
      vb.cpus = 1
    end

    # PROVISION

    # Enable provisioning with a shell script. Additional provisioners such as
    # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
    # documentation for more information about their specific syntax and use.
    # config.vm.provision "shell", inline: <<-SHELL
    #   apt-get update
    #   apt-get install -y apache2
    # SHELL

    # SSH,FIREWALLD (OPEN PORTS: 80) AND SELINUX
    protheus.vm.provision "shell", inline: <<-SHELL
      cat /home/vagrant/security/id_rsa.pub >> .ssh/authorized_keys
      sudo systemctl stop firewalld
      sudo systemctl disable firewalld
      sudo setenforce Permissive
      SHELL

    # INSTALL UPDATES
    protheus.vm.provision "shell",
      inline: "sudo yum update -y"
    # INSTALL PACKAGES /php7 - https://www.cloudbooklet.com/install-php-7-4-on-centos-8-or-rhel-8/

  end

end